export const ide_de = {
    server_was_overloaded_try_again: "Der Server war vermutlich gerade überlastet 😥 Bitte versuche es erneut!",
    no_live_output_result_to_follow: "Live-Ausgabe nicht möglich, Ergebnis folgt gleich...",
    compilation_successful: "Erfolgreich kompiliert 🎉",
    compilation_started: "Kompilierung gestartet... 🛠",
    program_running: "Programm wird ausgeführt...",
    program_testing: "Programm wird getestet 📝➡️✅ bitte warten...",
    no_executables_found: "🔎 Leider keine ausführbaren Dateien gefunden. Bitte zuerst kompilieren ⚙",
    program_exited_without_output: "Programm wurde (erfolgreich, aber ohne Ausgabe) beendet! ✔.",
    program_exited_probably_with_error: "Programm wurde (vermutlich fehlerhaft) beendet! ❌",
    security_error: "💥🙈 es gab wohl einen Sicherheitsfehler beim Testen deines Programms. Scheinbar hat dein Programm versucht, Dinge auszuführen, die nicht erlaubt sind. Korrigiere dies zuerst.\nWenn das Problem bestehen bleibt, solltest du dich an deine Lehrerin / deinen Lehrer wenden.",
    computation_time_exceeded: "❌ Programm wurde frühzeitig beendet! Die Rechenzeit ist vermutlich abgelaufen. Hast du irgendwo eine Endlosschleife?",
    all_tests_passed: "Alle Tests bestanden 🎉🤩\n\nDu kannst nun höchstens noch versuchen, deinen Quellcode zu \"verschönern\" ;-)",
    no_test_passed: "Ups 🧐 Scheinbar wurde kein einziger Test bestanden! Vielleicht hilft dir die obere Ausgabe, um den Fehlern auf die Schliche zu kommen 🤗",
    error_during_testing: "💥🙈 es gab wohl einen Fehler beim Testen deines Programms. Probiere es erneut!\nStelle zunächst sicher, dass dein Programm ausgeführt werden kann.\nWenn das Problem bestehen bleibt, solltest du dich an deine Lehrerin / deinen Lehrer wenden.",
    test_aborted: "❌ Der Test wurde durch den User abgebrochen.",
    x_percent_of_tests_passed: "Du hast {percent}% der Tests bestanden. Vielleicht hilft dir die obere Ausgabe, um die restlichen Tests auch noch zu bestehen 🤗",
    stopped_by_user: "\nProgramm wurde vom User beendet! ✔",
    error_loading_project: "Fehler beim Laden des Projekts. Bitte zurück oder neu laden.",
    error_on_saving: "Fehler beim Speichern!",
    couldnt_rename_file: "Datei konnte nicht umbenannt werden.",
    file_rename_successful: "Datei erfolgreich umbenannt.",
    error_saving_project_description: "Fehler beim Speichern der Projektbeschreibung.",
    error_project_name_empty: "Projektname darf nicht leer sein!",
    project_not_existing_or_no_access: "Projekt existiert nicht, oder du hast keinen Zugriff darauf!",
    error_creating_homework: "Fehler beim Erstellen der Aufgabe!",
    homework_created_successfully: "Aufgabe erfolgreich erstellt.",
    file_created_successfully: "Datei erfolgreich erstellt.",
    error_creating_file: "Fehler beim Erstellen der Datei.",
    error_deleting_file: "Fehler beim Löschen der Datei.",
    error_reseting_homework_progress: "Fehler beim Zurücksetzen der Aufgabe!",
    error_stopping_program: "Programm konnte nicht beendet werden!",
    changing_template_may_lead_to_inconsistencies: "Änderung der Vorlage kann zu Inkonsistenzen führen!",
    description_of_inconsistencies_when_changing_template: "Du bearbeitest gerade die <u>Vorlage</u> einer Aufgabe! Wenn du Änderungen am <b>Code</b> durchführst und speicherst, dann kann dies zu Inkonsistenzen bei den verschiedenen SuS führen: <ul><li>Bei SuS, welche diese Aufgabe bereits bearbeiten, werden deine Änderungen <b>nicht ankommen</b>, solange sie ihren Fortschritt nicht löschen und die HA anschließend neu starten.</li><li>SuS, welche diese Aufgabe noch nicht gestartet haben, werden beim erstmaligen Öffnen immer den zu diesem Zeitpunkt aktuellsten Code dieser Vorlage verwenden.</li></ul>Änderungen des <b>Titels oder der Projektbeschreibung</b> sind hingegen kein Problem, können jederzeit geändert werden und werden beim Neuladen der IDE bei den SuS aktualisiert.",
    save_changes_before_closing: "Möchtest du die Änderungen vor dem Schließen speichern?",
    add_new_file: "Neue Datei hinzufügen",
    description_new_file: "Gib den neuen Dateinamen für die Datei ein. Denke an die Dateiendung (typischerweise <code>.java</code>)! <br> <br>Wenn du einen Order anlegen möchtest, dann musst du gleichzeitig auch eine Datei innerhalb des neuen Ordners angeben. <br><br><b><u>Beispiel:</u></b><br>Wenn du den Ordner \"<code>neu</code>\" anlegen möchtest, dann musst du auch eine Datei innerhalb des Ordners angeben (z. B. <code>MeineKlasse.java</code>). Gib daher als vollen Dateinamen <code>neu/MeineKlasse.java</code> an.",
    filename_is_invalid: "Dateiname ist ungültig (enthält Leerzeichen oder der Name existiert bereits)!",
    question_delete_file: "Datei löschen?",
    ask_delete_file_x: "Möchtest du die Datei {0} wirklich löschen?",
    delete_folder: "Ordner löschen",
    delete_folder_description: "Ordner können leider <b>nicht</b> direkt gelöscht werden. Du kannst allerdings sämtlichen Inhalt des Ordners löschen, dann wird der Ordner automatisch mitgelöscht.",
    rename_folder: "Ordner umbenennen",
    rename_folder_description: "Ordner können leider <b>nicht</b> direkt umbenannt werden. Du kannst allerdings sämtlichen Inhalt des Ordners umbenennen, dann entsteht automatisch ein neuer Ordner mit neuem Namen und der jetzige Ordner wird automatisch gelöscht.<br><br><u><b>Beispiel:</b></u><br>Du hast einen Ordner <code>old</code>, in dem sich die beiden Dateien <code>First.java</code> und <code>Second.java</code> befinden. Mit vollem Namen lauten diese Dateien <code>old/First.java</code> und <code>old/Second.java</code>. Wenn du die Dateien nacheinander in <code>new/First.java</code> und <code>new/Second.java</code> umbenennst, entspricht das dem Umbenennen des Ordners von <code>old</code> zu <code>new</code>.",
    rename_file: "Datei umbenennen",
    rename_file_description: "Gib den neuen Dateinamen für die Datei {0} ein. Denke an die Dateiendung (typischerweise {1})!",
    rename_file_invalid: "Dateiname ist ungültig (enthält Leerzeichen oder der Name existiert bereits)!",
    create_assignment: "Aufgabe erstellen",
    create_assignment_description_1: "⚠️<b>Wichtig:</b> Die Konfiguration eines Projektes sollte vollständig abgeschlossen sein, <b>bevor</b> du daraus eine Aufgabe erstellst. Nach diesem Schritt sollten Änderungen vermieden werden, da die Schüler/innen andernfalls u. U. unterschiedliche Versionen bearbeiten.",
    create_assignment_description_2: "Beim Erstellen einer Aufgabe wird der <b>jetzige Zustand</b> deines Projekts kopiert und im Hintergrund \"unsichtbar\" als Vorlage für die Schüler/innen gespeichert. Nach dem Erstellen werden weitere Änderungen an diesem privaten Projekt von dir also <b>nicht</b> in der Aufgabe bei den Schüler/innen sichtbar. Du könntest dieses private Projekt also z. B. anschließend auch gefahrlos löschen und die Aufgabe würde weiterhin bestehen bleiben. <b>Wichtig:</b> Die Schüler/innen können den Einstiegspunkt (= Klasse mit main-Methode) weder ändern noch umbenennen!",
    assignment_already_created: "Aus diesem Projekt wurde bereits eine Aufgabe erstellt für folgende Kurse:",
    choose_course: "Kurs wählen",
    create_course_in_usermanagement: "Du musst zuerst in der Benutzerverwaltung einen Kurs anlegen (idealerweise mit Schülern)!",
    create_assignment: "Aufgabe erstellen",
    question_restart_assignment: "Aufgabe neu beginnen?",
    restart_assignment_description: "Möchtest du deinen bisherigen Fortschritt löschen und anschließend wieder in einem \"sauberen\" Projekt von vorne beginnen?",
    new_file: "Neue Datei",
    restart_assignment: "Aufgabe neu beginnen",
    ctrl_s: "Strg + S",
    ctrl_1: "Strg + 1",
    ctrl_2: "Strg + 2",
    ctrl_3: "Strg + 3",
    compile: "Kompilieren",
    execute: "Ausführen",
    test: "Testen",
    placeholder_for_input: "Eingabe (Entertaste zum Senden)",
    set_as_entry_point: "Als Einstiegspunkt setzen",
    error_main_class_not_found: "In der Haupt-/Einstiegsklasse (mit 🏠) wurde keine main-Methode gefunden. Stelle sicher, dass dort eine Methode mit folgender Signatur existiert:\npublic static void main(String[] args)",
    tooltip_entry_point: "Die Haupt/Einstiegsklasse des Programms, welche auch die main-Methode enthalten muss.",
    edit_computation_time: "Rechenzeit bearbeiten",
    success_setting_computation_time: "Rechenzeit erfolgreich gesetzt.",
    error_setting_computation_time: "Fehler beim Setzen der Rechenzeit.",
}